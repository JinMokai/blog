---
import BaseLayout from "@layouts/BaseLayout.astro";
import Footer from "@components/footer.astro";
import BackTop from "@components/backTop.astro";
import aboutData from "@scripts/about.mjs";
const title = "图片集";
const description = "图片集";
---

<BaseLayout title={title} description={description}>
  <main>
    <section class="main_grid">
      {
        aboutData.map((item) => (
          <figure data-src-loaded="false" class:list={[{ landscape: item.land }, { protrait: item.pro }]}>
            <img data-src={item.url} alt={item.alt} />
            <figcaption>
              {item.info}
              <small>{item.place}</small>
            </figcaption>
          </figure>
        ))
      }
    </section>
  </main>
  <BackTop />
  <footer>
    <Footer />
  </footer>
</BaseLayout>

<style>
  img {
    max-width: 100%;
    display: block;
  }
  main {
    width: min(90vw, 100vw - 2rem);
    margin: 0 auto;
  }
  .main_grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-auto-rows: minmax(30vh, auto);
    grid-auto-flow: dense;
    padding: 1rem;
    column-gap: 1rem;
    row-gap: 12rem;
    padding-block: 3rem;
  }
  /* 横板的图片格式 */
  .main_grid .landscape {
    grid-column: span 2;
    grid-row: span 2;
    height: 100%;
  }
  .main_grid .protrait {
    grid-row: span 2;
  }
  .main_grid img {
    width: 100%;
    height: 100%;
    -o-object-fit: cover;
    object-fit: cover;
  }
  .main_grid figure {
    position: relative;
  }

  figcaption {
    position: absolute;
    text-align: right;
    right: 0;
    padding-top: 0.625rem;
    font-size: 0.75rem;
  }
  figure img {
    border-radius: 0.25rem;
  }
  figcaption small {
    display: block;
  }
  @media screen and (max-width: 768px) {
    .main_grid {
      grid-template-columns: 1fr;
    }
    .main_grid .landscape,
    .main_grid .protrait {
      grid-column: span 1;
      grid-row: span 1;
    }
  }

  footer {
    margin-block-start: 6.25rem;
  }
</style>

<script>
  // 获取需要懒加载的figure元素
  const lazyload = document.querySelectorAll(".main_grid figure");
  // 创建一个Intersection Observer实例
  const observer = new IntersectionObserver((entries) => {
    // 遍历所有元素的Intersection Observer entry
    entries.forEach((entry) => {
      // 如果元素进入可视区域且未加载过图片
      if (entry.isIntersecting && entry.target.getAttribute("data-src-loaded") === "false") {
        // 遍历该元素内的所有img标签
        entry.target.querySelectorAll("img").forEach((img) => {
          // 将img的data-src赋值给src，加载图片
          img.src = img.dataset.src;
        });
        // 将该元素的data-src-loaded属性设置为true，表示该元素已经加载过图片，避免重复加载
        entry.target.setAttribute("data-src-loaded", "true");
      }
    });
  });
  // 遍历所有需要懒加载的元素，开始监听它们的可视区域
  lazyload.forEach((lazy) => observer.observe(lazy));
</script>
